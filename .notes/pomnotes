    Shit that still needs to be done:

Rework the game state data from the POM.Player class into the GameEngine or something
Rework all the player handling logic from the ActEngine into generic mob handling logic
Implement pathfinding for mobs
    For shadows, they will be unaware of the player by default but will become aware under
    specific circumstances? If a player picks up their orb or something or gets too close?
    Shadows need a condition in which they will pursue the player. I probably need to
    implement A* or something for pathfinding
Update meditation logic so you can only meditate in empty rooms (for testing)
Update combat logic so any orbs on your person are destroyed if you fight (lol)
Figure out how to make the classes distinct if that's how you want to do it
Look at how you're calling data from each class to try to reduce dependency on globals

Pathfinding brainstorm:
Predefine tiles on the map as dead ends
If pursuing the player, have the mob move into the adjacent tile that is not in a dead end
PROBLEM: Players could move into dead ends and mobs would not follow
In theory, no mob will have a vision range more than like 3 tiles unless it's a straight line
If the target y-distance is greater, move a space toward it on the y axis
If the target x-distance is greater, move a space toward it on the x axis
If both the x and y distances are equal, move the direction opposite of your last move
Mob pathfinding should prioritize orbs over players

1,1
2,1
3,1
3,2
4,2
5,2
5,3
6,3
7,3



x1 = 1;
y1 = 1;
x2 = 7;
y2 = 3;

var dx = x2 - x1;
var dy = y2 - y1;

// short - long, this will tell us how much to increment the short axis for each +1 on the long axis
var step = 0;
(dx >= dy) ? (step = dy/dx) : (step = dx/dy);

// step values for x and y, current coords
var sx = 0;
var sy = 0;

// cumulative x or y values
var cx = 0;
var cy = 0;

var path = [];

for (sx = 0; sx < dx; sx ++) {
    path.push({
        x: x1+sx, 
        y: y1+sy
    });
    // then if you're also crossing a line, add the other square
    cy += step;
    if (cy >= 1) {
    	cy -= 1;
        // gotta remember this to account for the repetition of the pattern
        cy += step;
		sy += 1;
        path.push({
            x: x1+sx,
            y: y1+sy
        });
    }
    // be sure to add or subtract after doing everything else to prep for the next loop
}
path.push({
		x: x2,
    y: y2
});

for (cnt = 0; cnt < path.length; cnt++) {
console.log(path[cnt]);
}




POM
    ViewEngine
    ActEngine
    GameEngine
    
    Scheduler
    
    View
        Scene
            
    
    Mob
    
    
    Floor
        Room
            Tile

    Sheet
        
    BASE
    Util
	
Dependencies & Inheritance revamp brainstorm:

entities, components, systems
an entity just holds components
components hold data
systems handle entities based on game events and components

name scheme:
eName: engines
sName: systems
rName: registries
cName: components
tName: things?

POM
POM.Lib
POM.Thing

POM.eReg
POM.eGame
POM.eView
POM.eAct

POM.sFactory
POM.sMapGen
POM.sInit
POM.sScheduler
POM.sRegistry
POM.sRand
POM.sMath?
POM.sCombat
POM.sLog
POM.sMiniMap
POM.sText
POM.sStats
POM.sJourney
POM.sMemory
POM.sDraw
POM.sItem
POM.sInput
POM.sAgent

POM.cLoc
POM.cSize
POM.cOrig?
POM.cFx
POM.cHp
POM.cDmg
POM.cKind
POM.cAttr
POM.cSpr
POM.cImg
POM.cSpd
POM.cPass
POM.cPrep
POM.cPlayer
POM.cHands
POM.cInv
POM.cInfo
POM.cZone
POM.cLayer

What registries do I need?
All registries
All entities
All zones in POM.eView (gameplay)
All nodes/zones in gameplay (floor, minimap, stats, text)
All nodes/zones in floor (5x5 rooms)
All nodes/zones in minimap (6x6 doors, 5x5 rooms)
All nodes/zones in stats (health, understanding, items)
All nodes in text (5x??? chars)
All nodes in all 5 rooms ()

Program flow:
Init game
Generate lib entries
Generate engines
Populate game engine


// simple location in x,y
loc {
	x: '',
	y: '',
}

// width and height in px
size {
	h: '',
	w: '',
}

// source image for anything drawing sprites
src {
	img: '',
}

// the understood type of a given thing
kind {
	kind: '',
}

// the agent controlling a given thing
agent {
	agent: '',
}

// current and max health of a thing
hp {
	cur: '',
	max: '',
}

// speed and wait duration of a thing in the scheduler
spd {
	spd: '',
	wait: '',
}

// current status effects
fx {
	fx: '',
}

// damage dealt on attack
// can be expanded later to include armor, evasion
dmg {
	dmg: '',
}

// orthogonal groups by name
layer {
	isLayer,
	kind,
}

// generic player progress tracking data
progress {
	prog: '',
}

spritemap {
	kind,
	size,
	
}

graphic {
	size
}

// A system is a collection of behavior
// A zone is a collection of nodes
// A node is a defined area on a zone and contains layers
// A layer is an orthogonal group of things
// A thing is a container of raw data. Systems, grids, nodes, and layers are also things.

view: zone {

	// formerly scenes
	nodes: {
		zone: {
		
			// formerly zones
			nodes: {
				zone: {
				
					// formerly rooms
					nodes: {
						zone: {
						
							// formerly tiles
							nodes: {
								zone: {
								
								
								},
							},
						},
					},
				},
			},
		},
	},
	layers: {},
}


























